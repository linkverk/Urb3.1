# ═══════════════════════════════════════════════════════════════════════════
# IMPORTS
# ═══════════════════════════════════════════════════════════════════════════
# Description: Activity logging system imports
#
# External libraries: csv, datetime, pathlib, cryptography
# ═══════════════════════════════════════════════════════════════════════════

import csv
from datetime import datetime
from pathlib import Path
from cryptography.fernet import Fernet


# ═══════════════════════════════════════════════════════════════════════════
# SECTION 1: CONSTANTS & FILE PATHS
# ═══════════════════════════════════════════════════════════════════════════
# Description: File paths for logs and encryption keys
#
# Key components:
# - DATA_DIR: Directory for log files
# - LOG_FILE: Encrypted activity log CSV
# - FERNET_KEY_FILE: Encryption key for logs
# - LAST_CHECK_FILE: Last viewed log number (for unread count)
# ═══════════════════════════════════════════════════════════════════════════

# File paths
DATA_DIR = Path(__file__).parent / "data"
LOG_FILE = DATA_DIR / "system.log"
FERNET_KEY_FILE = DATA_DIR / "fernet_key.bin"
LAST_CHECK_FILE = DATA_DIR / "last_log_check.txt"


# ═══════════════════════════════════════════════════════════════════════════
# SECTION 2: ENCRYPTION HELPERS
# ═══════════════════════════════════════════════════════════════════════════
# Description: Internal helper functions for log encryption/decryption
#
# Key components:
# - _get_log_cipher(): Get Fernet cipher for logs
# - _encrypt_log_content(): Encrypt log content
# - _decrypt_log_content(): Decrypt log content
#
# Note: These are internal functions (prefixed with _)
# ═══════════════════════════════════════════════════════════════════════════


def _get_log_cipher():
    """
    Get Fernet cipher for log encryption.

    Logs must be encrypted and not readable with text editor,
    only via system interface.

    Returns:
        Fernet: Cipher object
    """
    # Read Fernet key (generated by database.py)
    if not FERNET_KEY_FILE.exists():
        raise FileNotFoundError(
            f"Fernet key file not found at {FERNET_KEY_FILE}! Run database.py first."
        )

    with open(FERNET_KEY_FILE, "rb") as f:
        key = f.read()

    return Fernet(key)


def _encrypt_log_content(content):
    """
    Encrypt log content with Fernet.

    Args:
        content (str): Plain text log content

    Returns:
        bytes: Encrypted content
    """
    cipher = _get_log_cipher()
    return cipher.encrypt(content.encode())


def _decrypt_log_content(encrypted_content):
    """
    Decrypt log content with Fernet.

    Args:
        encrypted_content (bytes): Encrypted log content

    Returns:
        str: Decrypted plain text
    """
    cipher = _get_log_cipher()
    return cipher.decrypt(encrypted_content).decode()


# ═══════════════════════════════════════════════════════════════════════════
# SECTION 3: LOGGING FUNCTIONS
# ═══════════════════════════════════════════════════════════════════════════
# Description: Core logging functionality
#
# Key components:
# - log_activity(): Record encrypted activity log entry
#
# Note: All logs are encrypted and stored in CSV format
# ═══════════════════════════════════════════════════════════════════════════


def log_activity(username, activity, additional_info="", suspicious=False):
    """
    Log an activity to encrypted log file.

    Log structure: No. | Date | Time | Username | Activity | Additional Info | Suspicious

    Args:
        username (str): Username performing action
        activity (str): Description of activity
        additional_info (str): Extra information (optional)
        suspicious (bool): Flag as suspicious (default: False)

    Examples:
        log_activity("super_admin", "Logged in")
        log_activity("john_m_05", "Unsuccessful login", "Wrong password", suspicious=True)
        log_activity("admin01", "New traveler added", "Customer ID: 12345")
    """
    # Create data directory if not exists
    DATA_DIR.mkdir(parents=True, exist_ok=True)

    # Get current log number
    log_number = 1
    if LOG_FILE.exists():
        # Read existing logs to find highest number
        try:
            with open(LOG_FILE, "rb") as f:
                encrypted_content = f.read()
            decrypted_content = _decrypt_log_content(encrypted_content)
            lines = decrypted_content.strip().split("\n")
            if len(lines) > 1:  # Skip header
                last_line = lines[-1]
                log_number = int(last_line.split(",")[0].strip('"')) + 1
        except Exception:
            log_number = 1

    # Get current date and time
    now = datetime.now()
    date_str = now.strftime("%d-%m-%Y")  # DD-MM-YYYY
    time_str = now.strftime("%H:%M:%S")  # HH:MM:SS

    # Suspicious flag
    suspicious_str = "Yes" if suspicious else "No"

    # Create log entry (CSV format)
    log_entry = [
        str(log_number),
        date_str,
        time_str,
        username,
        activity,
        additional_info,
        suspicious_str,
    ]

    # Read existing logs (decrypt if exists)
    existing_content = ""
    if LOG_FILE.exists():
        try:
            with open(LOG_FILE, "rb") as f:
                encrypted_content = f.read()
            existing_content = _decrypt_log_content(encrypted_content)
        except Exception:
            # If decryption fails, start fresh with header
            existing_content = (
                "No.,Date,Time,Username,Activity,Additional Info,Suspicious\n"
            )
    else:
        # First log - add header
        existing_content = (
            "No.,Date,Time,Username,Activity,Additional Info,Suspicious\n"
        )

    # Append new log entry
    log_line = ",".join(f'"{field}"' for field in log_entry)
    new_content = existing_content + log_line + "\n"

    # Encrypt and write
    encrypted_content = _encrypt_log_content(new_content)
    with open(LOG_FILE, "wb") as f:
        f.write(encrypted_content)


# ═══════════════════════════════════════════════════════════════════════════
# SECTION 4: LOG RETRIEVAL FUNCTIONS
# ═══════════════════════════════════════════════════════════════════════════
# Description: Retrieve and filter logs
#
# Key components:
# - get_all_logs(): Get all decrypted logs
# - get_suspicious_logs(): Filter suspicious activities
# - get_unread_suspicious_count(): Count unread suspicious logs
# - check_suspicious_activities(): Alias for unread count
#
# Note: Logs are decrypted on retrieval
# ═══════════════════════════════════════════════════════════════════════════


def get_all_logs():
    """
    Retrieve all logs (decrypted) for admin viewing.

    Returns:
        list: List of log dictionaries

    Example:
        logs = get_all_logs()
        for log in logs:
            print(f"{log['no']}: {log['username']} - {log['activity']}")
    """
    if not LOG_FILE.exists():
        return []

    try:
        # Read and decrypt log file
        with open(LOG_FILE, "rb") as f:
            encrypted_content = f.read()

        decrypted_content = _decrypt_log_content(encrypted_content)

        # Parse CSV
        lines = decrypted_content.strip().split("\n")
        if len(lines) <= 1:  # Only header or empty
            return []

        logs = []
        reader = csv.DictReader(lines)
        for row in reader:
            logs.append(
                {
                    "no": int(row["No."]),
                    "date": row["Date"],
                    "time": row["Time"],
                    "username": row["Username"],
                    "activity": row["Activity"],
                    "additional_info": row["Additional Info"],
                    "suspicious": row["Suspicious"],
                }
            )

        return logs

    except Exception as e:
        print(f"Error reading logs: {e}")
        return []


def get_suspicious_logs():
    """
    Get only suspicious logs.

    Returns:
        list: List of suspicious log dictionaries

    Example:
        suspicious = get_suspicious_logs()
        if suspicious:
            print("⚠️  SECURITY ALERTS:")
            for log in suspicious:
                print(f"  - {log['activity']} by {log['username']}")
    """
    all_logs = get_all_logs()
    return [log for log in all_logs if log["suspicious"] == "Yes"]


def get_unread_suspicious_count():
    """
    Count unread suspicious activities.

    Produces an alert for unread suspicious activities once a
    System Administrator or Super Administrator is logged in.

    Returns:
        int: Number of unread suspicious logs

    Example:
        count = get_unread_suspicious_count()
        if count > 0:
            print(f"⚠️  WARNING: {count} unread suspicious activities!")
    """
    # Get last checked log number
    last_checked = 0
    if LAST_CHECK_FILE.exists():
        try:
            with open(LAST_CHECK_FILE, "r") as f:
                last_checked = int(f.read().strip())
        except Exception:
            last_checked = 0

    # Get all suspicious logs
    suspicious_logs = get_suspicious_logs()

    # Count unread (logs with number > last_checked)
    unread_count = sum(1 for log in suspicious_logs if log["no"] > last_checked)

    return unread_count


def check_suspicious_activities():
    """
    Check for unread suspicious activities (alias for get_unread_suspicious_count).

    Returns:
        int: Number of unread suspicious activities

    Example:
        count = check_suspicious_activities()
        if count > 0:
            print(f"⚠️  {count} suspicious activities detected!")
    """
    return get_unread_suspicious_count()


# ═══════════════════════════════════════════════════════════════════════════
# SECTION 5: LOG MANAGEMENT FUNCTIONS
# ═══════════════════════════════════════════════════════════════════════════
# Description: Manage log state and display
#
# Key components:
# - mark_logs_as_read(): Mark all logs as viewed
# - clear_logs(): Delete all logs (Super Admin only)
# - display_logs(): Format and display logs in table
#
# Note: Used by admin interface for log management
# ═══════════════════════════════════════════════════════════════════════════


def mark_logs_as_read():
    """
    Mark all current logs as read.

    Called when admin views logs.
    Updates last_log_check.txt with highest log number.

    Example:
        mark_logs_as_read()  # Called after admin views logs
    """
    logs = get_all_logs()
    if not logs:
        return

    # Get highest log number
    highest_log_no = max(log["no"] for log in logs)

    # Save to file
    DATA_DIR.mkdir(parents=True, exist_ok=True)

    with open(LAST_CHECK_FILE, "w") as f:
        f.write(str(highest_log_no))


def clear_logs():
    """
    Clear all logs - Super Admin only.

    Returns:
        tuple: (success, message)

    Example:
        from auth import check_permission
        if check_permission("view_logs"):
            success, message = clear_logs()
    """
    try:
        # Remove log file
        if LOG_FILE.exists():
            LOG_FILE.unlink()

        # Remove last check file
        if LAST_CHECK_FILE.exists():
            LAST_CHECK_FILE.unlink()

        return True, "All logs cleared successfully"

    except Exception as e:
        return False, f"Error clearing logs: {e}"


def display_logs(logs, show_suspicious_only=False):
    """
    Display logs in formatted table.

    Args:
        logs (list): List of log dictionaries
        show_suspicious_only (bool): Filter suspicious logs

    Example:
        logs = get_all_logs()
        display_logs(logs)
    """
    if show_suspicious_only:
        logs = [log for log in logs if log["suspicious"] == "Yes"]

    if not logs:
        print("No logs found.")
        return

    # Column widths
    col_widths = {
        "no": 5,
        "date": 12,
        "time": 10,
        "username": 15,
        "activity": 30,
        "additional_info": 55,
        "suspicious": 10,
    }

    # Calculate total table width
    total_width = sum(col_widths.values()) + (len(col_widths) - 1) * 3  # 3 for " | "

    # Header
    print("\n" + "=" * total_width)
    print(
        f"{'No.':<{col_widths['no']}} | "
        f"{'Date':<{col_widths['date']}} | "
        f"{'Time':<{col_widths['time']}} | "
        f"{'Username':<{col_widths['username']}} | "
        f"{'Activity':<{col_widths['activity']}} | "
        f"{'Additional Info':<{col_widths['additional_info']}} | "
        f"{'Suspicious':<{col_widths['suspicious']}}"
    )
    print("=" * total_width)

    # Logs
    for log in logs:
        print(
            f"{log['no']:<{col_widths['no']}} | "
            f"{log['date']:<{col_widths['date']}} | "
            f"{log['time']:<{col_widths['time']}} | "
            f"{log['username']:<{col_widths['username']}} | "
            f"{log['activity']:<{col_widths['activity']}} | "
            f"{log['additional_info']:<{col_widths['additional_info']}} | "
            f"{log['suspicious']:<{col_widths['suspicious']}}"
        )

    print("=" * total_width)
    print(f"Total logs: {len(logs)}")

    # Show suspicious count
    suspicious_count = sum(1 for log in logs if log["suspicious"] == "Yes")
    if suspicious_count > 0:
        print(f"⚠️  Suspicious activities: {suspicious_count}")
